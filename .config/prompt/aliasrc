#!/bin/bash

###############
### ALIASES ###
###############

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias clr="clear"
alias la="ls -AFGghl"
alias las="stat -c '%A %a %n' *" # Show octal permissions
alias gc="git commit"
alias gcm="git commit -m"
alias gpuom="git push -u origin master"
alias gpom="git push origin master"
alias gpuo="git push -u origin"
alias gpo="git push origin"
alias gp="git push"
alias gs="git status"
alias gss="git status -s"
alias giff="git diff"
alias glog="git log --graph"
alias glogc=git_log_commit_count
alias code="open -a 'Visual Studio Code'"
alias gh="cd ~/github/"
alias repos="cd ~/github/"
alias dot="cd ~/dotfiles/"
alias pro="cd ~/projects/"
alias aur="cd ~/packages/"
alias mongorun="mongod --dbpath ~/paths/mongodb-osx-x86_64-4.0.3/data"
alias todoread="cat ~/github/todo/README.md"
alias todoedit="nvim ~/github/todo/README.md"
alias rr="ranger"
alias vm="nvim"
alias icat="kitty +kitten icat"
alias screenshot="scrot ~/pictures/screenshots/%Y-%m-%d-%T-screenshot.png -d 5"
alias dspl="~/.config/i3/i3scaling.sh"
alias wrls="sudo wifi-menu"
alias todopush=push_todos
alias todopull=pull_todos
alias hunt=find_string_in_file
alias mark=find_matching_file_or_subdir
alias bklt=set_xbacklight
alias vlme=set_volume
alias wthr=get_weather
alias clone=clone_repo

#############
### UTILS ###
#############

git_log_commit_count() {
	total="$(git rev-list --all --count)"
	each="$(git shortlog -s -n -e --all)"

	printf "${bold}Total: ${total}${reset}${newline}${each}${newline}"
}

# -----------------------------------------------------------------------------

push_todos() {
	pushd "$HOME/github/todo/" && \
	git add . && \
	git commit -m "Bump @ $(date '+%Y/%m/%d %H:%M')" && \
	git push && \
	cd "$(dirs -l -0)" && dirs -c
}

# -----------------------------------------------------------------------------

pull_todos() {
	pushd "$HOME/github/todo/" && \
	git pull && \
	cd "$(dirs -l -0)" && dirs -c
}

# -----------------------------------------------------------------------------

# Find all files in dirs/subdirs containing search query
find_string_in_file() {
	grep \
		--exclude-dir=node_modules \
		--exclude-dir=coverage \
		--exclude-dir=.fusebox \
		--exclude-dir=.next \
		--exclude-dir=dist \
		--exclude-dir=.git \
		-wroni "${1}" . | sort -u | grep -iv "^${1}" | sed "/^$/d" | grep -i --color=always "${1}"
}

# -----------------------------------------------------------------------------

# Find all sbudirs/filenames in dirs/subdirs matching query
find_matching_file_or_subdir() {
	find . \
		-not -path "*node_modules*" \
		-not -path "*.fusebox*" \
		-not -path "*.next*" \
		-not -path "*dist*" \
		-not -path "*.git*" \
		-iname "*${1}*" | sort -u | grep -i --color=always "${1}"
}

# -----------------------------------------------------------------------------

# Window manager helper for starting, stopping or restarting either chunkwm or skhd
wm() {
	brew services "${1}" koekeishiya/formulae/"${2}"
}

# -----------------------------------------------------------------------------

# Change X screen brightness, when backlight keys increments aren't precise enough
set_xbacklight() {
	[[ "$1" -gt 100 ]] && xbacklight -set 100
	[[ "$1" -lt 5 ]] && xbacklight -set 5

	xbacklight -set "${1}"
}

# -----------------------------------------------------------------------------

# Change volume through pamixer, when colume keys increments aren't precise enough
set_volume() {
	[[ "$1" -gt 100 ]] && pamixer --set-volume 100
	[[ "$1" -lt 5 ]] && pamixer --set-volume 5

	pamixer --set-volume "${1}"
}

# -----------------------------------------------------------------------------

# Get weather report for specified location
# if second argument (optional) is "-f", get 3-day forecast for morning, nnon, evening, night
# else if first argument is only location, get current weather only
get_weather() {
	if [[ "$2" == "-f" ]]; then
		curl "http://wttr.in/${1}?M"
	else
		curl "http://wttr.in/${1}?0&M"
	fi
}

# -----------------------------------------------------------------------------

# Clone a Github by providing arguments:
# 1: username
# 2: repository
clone_repo() {
	if [ $# -lt 2 ]; then
		echo "Too few arguments provided"
		echo "Please provide:"
		echo "ARG 1: username"
		echo "ARG 2: repository"
		exit 1
	fi

	git clone https://github.com/"$1"/"$2".git
}
