#!/bin/bash

#################
### VARIABLES ###
#################

arrow_symbol="›"
exit_symbol="$arrow_symbol"

newline="\n"

ahead_symbol="+"
behind_symbol="-"
branch_symbol=""
conflicts_symbol="&"
deleted_symbol="¿"
modified_symbol="!"
staged_symbol="*"
stashed_symbol="§"
untracked_symbol="?"

prefix_color="$white"
root_color="$red"
dir_color="$cyan"
git_branch_color="$magenta"
git_status_color="$red"
exec_time_color="$yellow"
exit_ok_color="$green"
exit_bad_color="$red"

dir_prefix="in"
git_prefix="on"
git_status_prefix="("
git_status_suffix=")"
exec_time_prefix="took"

###############
### HELPERS ###
###############

command_exists() {
	command -v $1 > /dev/null 2>&1
}

is_git_repository() {
	command git rev-parse --is-inside-work-tree &> /dev/null
}

timer_start() {
	start_time=${start_time:-$SECONDS}
}

timer_stop() {
	timer=$(($SECONDS - $start_time))
	unset start_time
}

trap timer_start DEBUG

###############
### MODULES ###
###############

user_module() {
	[[ "$UID" -eq 0 ]] && PS1+="${root_color}$USER ${prefix_color}${dir_prefix} "
}

# -----------------------------------------------------------------------------

dir_module() {
	local dir="$(pwd | sed -E -e "s|^$HOME|~|")"
	local trim_dir="${dir#"${dir%/*/*}/"}"

	PS1+="${dir_color}${trim_dir}"
}

# -----------------------------------------------------------------------------

git_branch_module() {
	is_git_repository || return

	local branch="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"

	PS1+=" ${prefix_color}${git_prefix} ${git_branch_color}${branch_symbol} ${branch}"
}

# -----------------------------------------------------------------------------

git_status_module() {
	is_git_repository || return

	local status=""

	local conflicts="$(git diff --name-only --diff-filter=U 2> /dev/null | wc -l)"
	[[ "$conflicts" -gt 0 ]] && status+="${conflicts_symbol}"

	local deleted="$(git diff --name-only --diff-filter=D 2> /dev/null | wc -l)"
	[[ "$deleted" -gt 0 ]] && status+="${deleted_symbol}"

	local staged="$(git diff --staged --name-only --diff-filter=AM 2> /dev/null | wc -l)"
	[[ "$staged" -gt 0 ]] && status+="${staged_symbol}"

	local modified="$(git diff --name-only --diff-filter=M 2> /dev/null | wc -l)"
	[[ "$modified" -gt 0 ]] && status+="${modified_symbol}"

	local untracked="$(git ls-files --other --exclude-standard | wc -l)"
	[[ "$untracked" -gt 0 ]] && status+="${untracked_symbol}"

	local ahead="$(git rev-list --left-only --count HEAD...@"{u}" 2> /dev/null)"
	[[ "$ahead" -gt 0 ]] && status+="${ahead_symbol}"

	local behind="$(git rev-list --left-only --count @"{u}"...HEAD 2> /dev/null)"
	[[ "$behind" -gt 0 ]] && status+="${behind_symbol}"

	local stashed="$(git stash list 2> /dev/null)"
	[[ -n "$stashed" ]] && status+="${stashed_symbol}"

	[[ "$status" != "" ]] && PS1+=" ${git_status_color}${git_status_prefix}${status}${git_status_suffix}"
}

# -----------------------------------------------------------------------------

exec_time_module() {
	(( $timer < 3 )) && return

	local output=""

	local days=$(( $timer / 86400 ))
	local hours=$(( $timer / 3600 % 24 ))
	local minutes=$(( $timer / 60 % 60 ))
	local seconds=$(( $timer % 60 ))

	(( $days > 0 )) && output+="${days}d "
	(( $hours > 0 )) && output+="${hours}h "
	(( $minutes > 0 )) && output+="${minutes}m "
	output+="${seconds}s"

	PS1+=" ${prefix_color}${exec_time_prefix}${exec_time_color} ${output}"
}

# -----------------------------------------------------------------------------

exit_code_module() {
	local exit_status

	if [[ "$RETVAL" -eq 0 ]]; then
		exit_status="${exit_ok_color}"
	else
		exit_status="${exit_bad_color}"
	fi

	PS1+="${newline}${reset}${bold}${exit_status}${exit_symbol}${reset} "
}

####################
### PROMPT ORDER ###
####################

prompt_modules=(
	"user_module"
	"dir_module"
	"git_branch_module"
	"git_status_module"
	"exec_time_module"
	"exit_code_module"
)

######################
### POINT OF ENTRY ###
######################

compose_prompt() {
	RETVAL=$?

	timer_stop

	PS1=""

	PS1+="${bold}${italic}"

	for module in "${!prompt_modules[@]}"; do
		${prompt_modules[$module]}
	done
}

PROMPT_COMMAND="compose_prompt"
